from typing import Any, Dict, List

from autogen import (
    AssistantAgent,
    ConversableAgent,
    GroupChat,
    GroupChatManager,
    UserProxyAgent,
)
from autogen.agentchat.contrib.retrieve_assistant_agent import RetrieveAssistantAgent

from agents.agent import EmbeddingRetrieverAgent
from agents.agent_conf import base_cfg, exec_py_conf, retrieve_conf, write_file_config
from agents.functions import Functions

"""
From: https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb
Call RetrieveUserProxyAgent while init chat with another user proxy agent
Sometimes, there might be a need to use RetrieveUserProxyAgent in group chat without initializing the chat with it. In such scenarios, it becomes essential to create a function that wraps the RAG agents and allows them to be called from other agents. WHY?
"""

PROBLEM = "I want to understand the agent tuning paper and come out with a minimal implementation of some of the core ideas in the paper the code must be executable."

# TODO: https://microsoft.github.io/autogen/blog/2023/10/26/TeachableAgent

termination_msg = (
    lambda x: isinstance(x, dict)
    and "TERMINATE" == str(x.get("content", ""))[-9:].upper()
)
# def is_termination_msg(termination_msg

#         return x.get("page_content", " ").rstrip().endswith("TERMINATE")
#     else:
#         return False

# lmconf = {
#     **lmconf,
#     # "cache_seed": SEED,
# }

# usrproxagent can exe code, feedback provider to other agents.
# To modify the way to execute code blocks, single code block, or function call, override execute_code_blocks, run_code, and execute_function methods respectively. (https://microsoft.github.io/autogen/docs/reference/agentchat/user_proxy_agent)


def create_research_team() -> List[ConversableAgent]:
    agent0 = UserProxyAgent(
        name="main_userproxy",
        human_input_mode="NEVER",
        code_execution_config=False,
        description="Your role is to coordinate the completion of tasks related to generating code based off of machine learning and AI research. You must be diligent and operate in a step by step manner, make use of all the agents at your disposal.",
        llm_config=base_cfg,
    )

    retriever = EmbeddingRetrieverAgent(
        name="info_hoarder",
        human_input_mode="NEVER",
        description="A retrieval augmented agent whose role is to retrieve additional information when asked, you can access an embeddings database with information related to code and research papers.",
        code_execution_config=False,
        # llm_config=base_cfg,
        retrieve_config={
            "task": "qa",
        },
        # max_consecutive_auto_reply=4,
    )

    agent2 = RetrieveAssistantAgent(
        name="code_reviewer",
        description="Agent used to review code, given the information retrieved by the retrieval agent and other information related to the main problem at hand. Review the code generated by the coding_agent to make sure it is executable and logically follows the ideas from the research and source code.",
        llm_config=retrieve_conf,
        is_termination_msg=termination_msg,
        code_execution_config=False,
    )
    agent3 = AssistantAgent(
        name="coding_agent",
        description="A coding agent that is tasked with iteratively generating code based off of the information provided by the retrieval agent and the code designer agent.",
        code_execution_config={"work_dir": "./sandbox", "use_docker": False},
        # function_map={
        #     "execute_and_save": execute_and_save,
        # },
        is_termination_msg=termination_msg,
        llm_config=retrieve_conf,
    )
    # agent0.sen
    # retriever.send

    return [agent0, retriever, agent2, agent3]


# rc: https://microsoft.github.io/autogen/blog/2023/10/18/RetrieveChat/


def _reset_agents(agents: List[ConversableAgent]) -> None:
    [agent.reset() for agent in agents]


def init_rag_gc(problem) -> None:
    agent0, retriever, agent2, agent3 = create_research_team()
    _reset_agents([agent0, retriever, agent2, agent3])
    groupchat = GroupChat(
        agents=[agent0, agent2, agent3],
        messages=[],
        max_round=44,
        allow_repeat_speaker=False,
        speaker_selection_method="auto",
    )

    def retrieve_content(
        message, n_results=7, retriever: EmbeddingRetrieverAgent = retriever
    ):
        retriever.n_results = n_results  # Set the number of results to be retrieved.
        # Check if we need to update the context.
        update_context_case1, update_context_case2 = retriever._check_update_context(
            message
        )
        if (update_context_case1 or update_context_case2) and retriever.update_context:
            retriever.problem = (
                message if not hasattr(retriever, "problem") else retriever.problem
            )
            _, ret_msg = retriever._generate_retrieve_user_reply(message)
        else:
            ret_msg = retriever.generate_init_message(message, n_results=n_results)
        return ret_msg if ret_msg else message

    for agent in [agent0, agent2, agent3]:
        # register functions for all agents.
        agent.register_function(
            function_map={
                "retrieve_content": retrieve_content,
            }
        )

    manager = GroupChatManager(groupchat=groupchat, llm_config=retrieve_conf)
    agent0.initiate_chat(
        manager,
        message=problem,
    )


if __name__ == "__main__":
    init_rag_gc(problem=PROBLEM)
    # from agents.coordinator import Coordinator
    # from agents.functions import Functions

    # multiagent_coordinator = Coordinator(
    #     team_name="research_team",
    #     agents=create_research_team(),
    #     instruments=Functions,
    # )

    # res = multiagent_coordinator.sequential_conversation(prompt=PROBLEM)
    # print(res)
    # call_rag_chat(
    #     problem="Please summarize the agent tuning paper for me, use the retrieve content function to get more information about the agent tuning paper"
    # ) or init_rag_gc(
    #     problem="Please summarize the agent tuning paper for me, use the retrieve content function to get more information about the agent tuning paper"
    # )
