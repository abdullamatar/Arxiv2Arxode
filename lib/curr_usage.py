from typing import Any, Dict, List

from autogen import (AssistantAgent, ConversableAgent, GroupChat,
                     GroupChatManager, UserProxyAgent)
from autogen.agentchat.contrib.retrieve_assistant_agent import \
    RetrieveAssistantAgent

from agents.agent import EmbeddingRetrieverAgent
from agents.agent_conf import (base_cfg, exec_py_conf, retrieve_conf,
                               write_file_config)
from agents.functions import Functions

"""
From: https://github.com/microsoft/autogen/blob/main/notebook/agentchat_groupchat_RAG.ipynb
Call RetrieveUserProxyAgent while init chat with another user proxy agent
Sometimes, there might be a need to use RetrieveUserProxyAgent in group chat without initializing the chat with it. In such scenarios, it becomes essential to create a function that wraps the RAG agents and allows them to be called from other agents. WHY?
"""

PROBLEM = "I want to understand the agent tuning paper and come out with a minimal implementation of some of the core ideas in the paper the code must be executable."

# TODO: https://microsoft.github.io/autogen/blog/2023/10/26/TeachableAgent

termination_msg = (
    lambda x: isinstance(x, dict)
    and "TERMINATE" == str(x.get("content", ""))[-9:].upper()
)
# def is_termination_msg(termination_msg

#         return x.get("page_content", " ").rstrip().endswith("TERMINATE")
#     else:
#         return False

# lmconf = {
#     **lmconf,
#     # "cache_seed": SEED,
# }

# usrproxagent can exe code, feedback provider to other agents.
# To modify the way to execute code blocks, single code block, or function call, override execute_code_blocks, run_code, and execute_function methods respectively. (https://microsoft.github.io/autogen/docs/reference/agentchat/user_proxy_agent)


def create_research_team() -> List[ConversableAgent]:
    # TODO: role def, assAgent for function/tool selection, user prox for eval() https://microsoft.github.io/autogen/docs/Use-Cases/agent_chat/#enhanced-inference
    agent0 = UserProxyAgent(
        name="main_userproxy",
        human_input_mode="NEVER",
        code_execution_config=False,
        system_message="If you encounter the word UPDATE CONTEXT use the retrieve_content function to get more information about the paper.",
        description="Your role is to coordinate the completion of tasks related to generating code based off of machine learning and AI research. You must be diligent and operate in a step by step manner, make use of all the agents at your disposal.",
        # llm_config=base_cfg,
    )

    retriever = EmbeddingRetrieverAgent(
        name="info_hoarder",
        human_input_mode="NEVER",
        description="A retrieval augmented agent whose role is to retrieve additional information when asked, you can access an embeddings database with information related to code and research papers.",
        code_execution_config=False,
        collection_name="init_vecdb",
        llm_config=base_cfg,
        retrieve_config={
            "task": "qa",
            "client": "psycopg2",
        },
        # max_consecutive_auto_reply=4,
    )

    agent2 = AssistantAgent(
        name="code_reviewer",
        description="Agent used to review code, given the information retrieved by the retrieval agent and other information related to the main problem at hand. Review the code generated by the coding_agent to make sure it is executable and logically follows the ideas from the research and source code.",
        system_message="If you encounter the word UPDATE CONTEXT use the retrieve_content function to get more information about the paper.",
        llm_config=retrieve_conf,
        is_termination_msg=termination_msg,
        code_execution_config=False,
    )
    agent3 = AssistantAgent(
        name="coding_agent",
        system_message="If you encounter the word UPDATE CONTEXT use the retrieve_content function to get more information about the paper.",
        description="A coding agent that is tasked with iteratively generating code based off of the information provided by the retrieval agent and the code designer agent. Always save the code you generate to a file, and make sure it is executable. Change the name of the file to reflect the current iteration of the code.",
        code_execution_config={"work_dir": "./sandbox", "use_docker": False},
        # function_map={
        #     "execute_and_save": execute_and_save,
        # },
        is_termination_msg=termination_msg,
        llm_config=retrieve_conf,
    )
    # agent0.sen
    # retriever.send

    return [agent0, retriever, agent2, agent3]


# rc: https://microsoft.github.io/autogen/blog/2023/10/18/RetrieveChat/


if __name__ == "__main__":
    exit()
    init_rag_gc(problem=PROBLEM)
    # from agents.coordinator import Coordinator
    # from agents.functions import Functions

    # multiagent_coordinator = Coordinator(
    #     team_name="research_team",
    #     agents=create_research_team(),
    #     instruments=Functions,
    # )

    # res = multiagent_coordinator.sequential_conversation(prompt=PROBLEM)
    # print(res)
    # call_rag_chat(
    #     problem="Please summarize the agent tuning paper for me, use the retrieve content function to get more information about the agent tuning paper"
    # ) or init_rag_gc(
    #     problem="Please summarize the agent tuning paper for me, use the retrieve content function to get more information about the agent tuning paper"
    # )
